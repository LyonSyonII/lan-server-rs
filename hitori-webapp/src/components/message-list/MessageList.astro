---
import Message from "./Message.astro"
import MessageInput from "./MessageInput.astro";
---
<div id="wrapper">
  <x-message-list>
    <Message date={""} text={""} />
  </x-message-list>
  <!-- <button id="button-upload">Upload a file</button> -->
  <MessageInput />
</div>


<style>
  #wrapper {
    min-width: fit-content;

    margin: var(--padding);
    position: relative;
    
    display: grid;
    grid-template-rows: 90% 10%;
  }
  x-message-list {
    display: block;
    padding: 0;
    list-style: none;
    overflow: scroll;
    max-height: 100%;
  }
</style>

<script>
  import { MessageElement } from "./MessageElement";
  import { MessageListElement } from "./MessageListElement";

  customElements.define("x-message", MessageElement);
  customElements.define("x-message-list", MessageListElement);

  import Uppy from '@uppy/core';
  import Dashboard from '@uppy/dashboard';
  import DropTarget from "@uppy/drop-target";
  import '@uppy/core/dist/style.min.css';
  import '@uppy/dashboard/dist/style.min.css';
  
  export function downloadFile(data: Blob | File, filename: string, mime: string | undefined) {
    // It is necessary to create a new blob object with mime-type explicitly set
    // otherwise only Chrome works like it should
    const blob = new Blob([data], {type: mime || 'application/octet-stream'});
    // Create a link pointing to the ObjectURL containing the blob
    const blobURL = window.URL.createObjectURL(blob);
    const tempLink = document.createElement('a');
    tempLink.style.display = 'none';
    tempLink.href = blobURL;
    tempLink.setAttribute('download', filename);
    // Safari thinks _blank anchor are pop ups. We only want to set _blank
    // target if the browser does not support the HTML5 download attribute.
    // This allows you to download files in desktop safari if pop up blocking
    // is enabled.
    if (typeof tempLink.download === 'undefined') {
      tempLink.setAttribute('target', '_blank');
    }
    document.body.appendChild(tempLink);
    tempLink.click();
    document.body.removeChild(tempLink);
    setTimeout(() => {
      // For Firefox it is necessary to delay revoking the ObjectURL
      window.URL.revokeObjectURL(blobURL);
    }, 100);
  }
  
  const wrapper = document.querySelector("x-message-list")! as HTMLDivElement;
  
  const uppy = new Uppy()
    .use(Dashboard, { 
      trigger: "#button-upload",
      theme: "dark",
      closeModalOnClickOutside: true,
      singleFileFullScreen: true,
    })
  const dashboard = uppy.getPlugin<Dashboard>("Dashboard")!;
  uppy.use(DropTarget, { 
    target: wrapper,
    onDragOver: () => {
      dashboard.openModal();
    },
  });
  
  uppy.on("complete", (result) => {
    console.log({result});
    for (const f of result.successful) {
      downloadFile(f.data, f.name, f.meta.type);
    }
    dashboard.closeModal();
  });

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition((map) => {
      const lat = map.coords.latitude;
      const lon = map.coords.longitude;
      const url = 'https://maps.google.com/maps?q=' + lat + ',' + lon + '&t=&z=15&ie=UTF8&iwloc=&output=embed';
      
      const iframe = document.createElement("iframe");
      iframe.src = url;
      iframe.width = "600";
      iframe.height = "450";
      iframe.allowFullscreen = true;
      iframe.loading = "lazy";

      // document.body.querySelector("x-message-list").appendChild(iframe)
    
    });
  }
</script>